---
# Copyright 2017, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#TODO(evrardjp): Replace the next 2 tasks by a standard apt with cache
#when https://github.com/ansible/ansible-modules-core/pull/1517 is merged
#in 1.9.x or we move to 2.0 (if tested working)
- name: Check apt last update file
  stat:
    path: /var/cache/apt
  register: apt_cache_stat
  when:
    - ansible_pkg_mgr == 'apt'

- name: Update apt if needed
  apt:
    update_cache: yes
  when:
    - ansible_pkg_mgr == 'apt'
    - "ansible_date_time.epoch|float - apt_cache_stat.stat.mtime > {{cache_timeout}}"
  register: update_apt_cache
  until: update_apt_cache | success
  retries: 5
  delay: 2

# Under Ubuntu, this will only add the key
- name: Install external repo key with package
  apt:
    name: "{{ pip_install_external_repo_key_package }}"
    state: "{{ pip_install_external_repo_key_package_state | default('present') }}"
  when:
    - user_external_repo_key is not defined
  retries: 5
  delay: 2
  tags:
    - add-repo-keys

# When updating the cache in the apt_repository
# task, and the update fails, a retry does not
# detect a change the second attempt and therefore
# does not update the cache, resulting in a changed
# repo config, but no updated cache. To work around
# this bug we implement the change of repo config
# and the cache update as two seperate tasks.
- name: Install repo for distro binaries
  apt_repository:
    repo: "{{ uca_repo }}"
    state: present
    update_cache: no
    filename: "{{ uca_apt_source_list_filename | default(omit) }}"
  register: uca_add_repo
  when:
    - uca_enable | bool
  tags:
    - add-uca-repo

- name: Install external repo key manually (apt)
  apt_key:
    id: "{{ item.id | default(omit) }}"
    keyserver: "{{ item.keyserver | default(omit) }}"
    url: "{{ item.url | default(omit) }}"
    state: "{{ item.state | default('present') }}"
  register: add_keys
  until: add_keys | success
  retries: 5
  delay: 2
  with_items: "{{ user_external_repo_keys_list }}"
  tags:
    - add-repo-keys

# When updating the cache in the apt_repository
# task, and the update fails, a retry does not
# detect a change the second attempt and therefore
# does not update the cache, resulting in a changed
# repo config, but no updated cache. To work around
# this bug we implement the change of repo config
# and the cache update as two seperate tasks.
- name: Install external repo manually (apt)
  apt_repository:
    repo: "{{ item.repo }}"
    state: "{{ item.state | default('present') }}"
    update_cache: no
    filename: "{{ item.filename | default(omit) }}"
  register: use_external_repo_apt
  with_items: "{{ user_external_repos_list }}"
  tags:
    - add-external-repo

# Due to our Ansible strategy, a skipped task does not
# have a dictionary result, so we have to cater to the
# situation where either of the apt_repository tasks
# may not have the results dict in the register. As
# such we validate that the register is a mapping (dict).
- name: Update Apt cache
  apt:
    update_cache: yes
  when:
    - (uca_add_repo is mapping and uca_add_repo | changed) or
      (use_external_repo_apt is mapping and use_external_repo_apt | changed)
  register: update_apt_cache
  until: update_apt_cache | success
  retries: 5
  delay: 2
  tags:
    - add-uca-repo
    - add-external-repo
